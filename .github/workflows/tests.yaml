name: Tests

on:
  push:
    branches:
      - main
      - "maintenance/**"
    paths-ignore:
      - doc/data/messages/**
  pull_request:
    branches:
      - main
      - "maintenance/**"

env:
  CACHE_VERSION: 4
  KEY_PREFIX: venv

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  tests-linux:
    name: run / ${{ matrix.python-version }} / Linux
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
    outputs:
      python-key: ${{ steps.generate-python-key.outputs.key }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.1.4
      - name: Set up Python ${{ matrix.python-version }}
        id: python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
      - name: Generate partial Python venv restore key
        id: generate-python-key
        run: >-
          echo "key=${{ env.KEY_PREFIX }}-${{ env.CACHE_VERSION }}-${{
            hashFiles('pyproject.toml', 'requirements_test.txt',
          'requirements_test_min.txt', 'requirements_test_pre_commit.txt') }}" >>
          $GITHUB_OUTPUT
      - name: Restore Python virtual environment
        id: cache-venv
        uses: actions/cache@v4.0.2
        with:
          path: venv
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            steps.generate-python-key.outputs.key }}
      - name: Create Python virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          . venv/bin/activate
          python -m pip install -U pip setuptools wheel
          pip install -U -r requirements_test.txt
      - name: Run pytest
        run: |
          . venv/bin/activate
          pip list | grep 'astroid\|pylint'
          python -m pytest --durations=10 --benchmark-disable --cov --cov-report= tests/
      - name: Run functional tests with minimal messages config
        run: |
          . venv/bin/activate
          pip list | grep 'astroid\|pylint'
          python -m pytest -vv --minimal-messages-config tests/test_functional.py
